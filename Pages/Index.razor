@page "/"
@using BlazorApp1.Data
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorDateRangePicker
@using BlazorStrap
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util

<BSContainer IsFluid="true">
    <BSBasicForm>
        <BSRow>
            <BSCol XS="9">
                <!--Filter-->
                <BSFormGroup>
                    <!--<BSLabel For="exampleFormControlSelect1">Example select</BSLabel>-->
                    <BSBasicInput class="form-control form-control-sm" Id="exampleFormControlSelect1" InputType="InputType.Select" Value="string.Empty">
                        <option>Device001</option>
                        <option>Device002</option>
                        <option>Device003</option>
                        <option>Device004</option>
                        <option>Device005</option>
                    </BSBasicInput>
                </BSFormGroup>
            </BSCol>
            <BSCol XS="1">
                <!--Date filter-->
                <DateRangePicker class="form-control form-control-sm" OnRangeSelect="OnRangeSelect" @bind-StartDate="StartDate" @bind-EndDate="EndDate" />
            </BSCol>
            <BSCol XS="1">
                <BSButton ButtonType="ButtonType.Submit" IsActive="true" Color="Color.Primary"></BSButton>
            </BSCol>
        </BSRow>
    </BSBasicForm>
    <BSRow>
        <BSCol XS="2">
            <BSCard Color="Color.Primary" Class="m-2">
                <BSCard CardType="CardType.Body">
                    <BSCard CardType="CardType.Title">Special Title Treatment</BSCard>
                    <BSCard CardType="CardType.Text">With supporting text below as a natural lead-in to additional content.</BSCard>
                </BSCard>
            </BSCard>
            <BSCard Color="Color.Secondary" Class="m-2">
                <BSCard CardType="CardType.Body">
                    <BSCard CardType="CardType.Title">Special Title Treatment</BSCard>
                    <BSCard CardType="CardType.Text">With supporting text below as a natural lead-in to additional content.</BSCard>
                </BSCard>
            </BSCard>
            <BSCard Color="Color.Warning" Class="m-2">
                <BSCard CardType="CardType.Body">
                    <BSCard CardType="CardType.Title">Special Title Treatment</BSCard>
                    <BSCard CardType="CardType.Text">With supporting text below as a natural lead-in to additional content.</BSCard>
                </BSCard>
            </BSCard>
        </BSCol>
        <BSCol XS="6">
            <BSCard>
                <BSCard CardType="CardType.Body">
                    <!--Twin status-->
                    <BSJumbotron IsFluid="true">
                        <BSContainer>
                            <h1 class="display-4">Fluid jumbotron</h1>
                            <p class="lead">This is a modified jumbotron that occupies the entire horizontal space of its parent.</p>
                        </BSContainer>
                    </BSJumbotron>
                </BSCard>
            </BSCard>


        </BSCol>
        <BSCol XS="4">
            <BSCard>
                <BSCard CardType="CardType.Body">
                    <!--alerts-->
                    <BSTable IsSmall="true" IsHoverable="true" IsResponsive="true">
                        <thead>
                            <tr>
                                <th scope="col">Date</th>
                                <th scope="col">AlertCode</th>
                                <th scope="col">Alert Description</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int x = 1; x < 6; x++)
                            {
                                <tr>
                                    <th scope="row">2020/04/01 19.00</th>
                                    <td>9061</td>
                                    <td>Alert Description</td>
                                    <td><BSButton Color="Color.Info">Acknowledge</BSButton></td>
                                </tr>
                            }
                        </tbody>
                    </BSTable>
                </BSCard>
            </BSCard>
        </BSCol>
    </BSRow>
    <BSRow>
        <BSCol XS="8">
            <!--Telemetry-->
            <BSCard>
                <BSCard CardType="CardType.Header">Featured</BSCard>
                <BSCard CardType="CardType.Body">
                    <ChartJsLineChart @ref="_lineChartJs" Config="@_lineConfig" Width="600" Height="300" />

                </BSCard>
                <BSCard CardType="CardType.Footer">Footer</BSCard>
            </BSCard>
        </BSCol>
        <BSCol XS="4">
            <!--Statistics-->
            <BSCard>
                <BSCard CardType="CardType.Header">Featured</BSCard>
                <BSCard CardType="CardType.Body">
                    <ChartJsPieChart @ref="_pieChartJs" Config="@_config" Width="600" Height="300" />


                </BSCard>
                <BSCard CardType="CardType.Footer">Footer</BSCard>
            </BSCard>
        </BSCol>
    </BSRow>

    <BSRow>
        <BSCol XS="12">
            <BSBasicForm>

                <label>Username</label>
                <BSBasicInput InputType="InputType.Text" PlaceHolder="Default Username" @bind-Value="@Sender" />

                <br />
                <label>Broadcast Message</label>
                <BSBasicInput InputType="InputType.Text" PlaceHolder="Default Username" @bind-Value="@BroadcastMessage" />
                <BSButton OnClick="@(async () => await BroadcastAsync())" IsActive="true">BROADCAST</BSButton>
            </BSBasicForm>

            <ul id="messagesList">
                <li>E QUINDI</li>
                @foreach (var message in _messages)
                {
                    <li>@message</li>
                }
            </ul>

            <p>RISPOSTA: </p>
            <div class="alert alert-warning">
                @Log
            </div>

            <div class="alert alert-info">
                @Message
            </div>
        </BSCol>

    </BSRow>
</BSContainer>



@code {

    DateTimeOffset? StartDate { get; set; } = DateTime.Today.AddMonths(-1);
    DateTimeOffset? EndDate { get; set; } = DateTime.Today.AddDays(1).AddTicks(-1);

    private HubConnection _hubConnection;
    private List<string> _messages = new List<string>();

    //private string _userInput;
    //private string _messageInput;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:5001/NotificationHub")
            .Build();

        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            Message = encodedMsg;
            _messages.Add(encodedMsg);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();

    }

    Task BroadcastAsync() => _hubConnection.SendAsync("SendMessage", Sender, BroadcastMessage);

    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;



    //SIGNALR
    string Message { get; set; }
    string Log { get; set; }
    string Sender { get; set; }
    string BroadcastMessage { get; set; }



    public void OnRangeSelect(DateRange range)
    {
    }




    private LineConfig _lineConfig;
    private ChartJsLineChart _lineChartJs;
    LineDataset<TimeTuple<int>> _tempDataSet;

    private PieConfig _config;
    private ChartJsPieChart _pieChartJs;


    protected override void OnInitialized()
    {



        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Sample chart from Blazor"
                },
                Responsive = true,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                }
            }
        };

        _config.Data.Labels.AddRange(new[] { "A", "B", "C", "D" });

        var pieSet = new PieDataset
        {
            BackgroundColor = new[] { ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString() },
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff",
        };

        pieSet.Data.AddRange(new double[] { 4, 5, 6, 7 });
        _config.Data.Datasets.Add(pieSet);


        //LINECHART




        _lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Line Chart"
                },
                Legend = new Legend
                {
                    Position = Position.Right,
                    Labels = new LegendLabelConfiguration
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
{
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Millisecond,
                                Round = TimeMeasurement.Millisecond,
                                TooltipFormat = "DD.MM.YYYY HH:mm:ss:SSS",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Time"
                            }
                        }
                    }
                },
                Hover = new LineOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        //var forecasts = await _forecastService.GetForecastAsync(DateTime.Now, 2);

        _tempDataSet = new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = ColorUtil.RandomColorString(),
            BorderColor = ColorUtil.RandomColorString(),
            Label = "Temperature in C°",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };

        List<TimeTuple<int>> e = new List<TimeTuple<int>>();
        var rand = new Random();
        e.ToList();
        for (int i = 0; i < 10; i++)
        {
            e.Add(new TimeTuple<int>(new Moment(DateTime.Now.AddSeconds(-10000 * i)), rand.Next()));
        }

        _tempDataSet.AddRange(e);

        //_tempDataSet.AddRange(forecasts.Select(p => new TimeTuple<int>(new Moment(p.Date), p.TemperatureC)));
        _lineConfig.Data.Datasets.Add(_tempDataSet);



    }
}